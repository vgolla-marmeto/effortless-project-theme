{% doc %}
  @prompt
    Create a video slides section with autoplay options that supports both YouTube and regular videos. Include separate configuration options for desktop and mobile displays. Add video settings like loop and mute. When a video thumbnail is clicked, open a popup where the video plays. Allow users to scroll through remaining videos in the popup. Include navigation controls.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-slides-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .ai-video-slides__container-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: {{ block.settings.gap }}px;
  }

  @media screen and (max-width: 749px) {
    .ai-video-slides__container-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.columns_mobile }}, 1fr);
    }
  }

  .ai-video-slides__item-{{ ai_gen_id }} {
    position: relative;
    cursor: pointer;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-slides__thumbnail-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    background-color: #f4f4f4;
    overflow: hidden;
  }

  .ai-video-slides__thumbnail-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-video-slides__item-{{ ai_gen_id }}:hover .ai-video-slides__thumbnail-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-video-slides__play-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .ai-video-slides__play-icon-{{ ai_gen_id }} {
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 10px 0 10px 20px;
    border-color: transparent transparent transparent #ffffff;
    margin-left: 5px;
  }

  .ai-video-slides__item-{{ ai_gen_id }}:hover .ai-video-slides__play-button-{{ ai_gen_id }} {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .ai-video-slides__title-{{ ai_gen_id }} {
    margin-top: 10px;
    font-weight: 600;
    font-size: 16px;
    color: {{ block.settings.text_color }};}

  .ai-video-slides__description-{{ ai_gen_id }} {
    margin-top: 5px;
    font-size: 14px;
    color: {{ block.settings.text_color }};
  }

  /* Modal styles */
  .ai-video-modal-{{ ai_gen_id }} {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    overflow: hidden;
  }

  .ai-video-modal__container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .ai-video-modal__content-{{ ai_gen_id }} {
    position: relative;
    width: 90%;
    max-width: 1000px;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
  }

  .ai-video-modal__player-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
  }

  .ai-video-modal__player-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .ai-video-modal__info-{{ ai_gen_id }} {
    padding: 15px;
    background-color: rgba(0, 0, 0, 0.7);
    color: #ffffff;
  }

  .ai-video-modal__title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 5px;
  }

  .ai-video-modal__description-{{ ai_gen_id }} {
    font-size: 14px;
  }

  .ai-video-modal__close-{{ ai_gen_id }} {
    position: absolute;
    top: -40px;
    right: 0;
    width: 30px;
    height: 30px;
    background: none;
    border: none;
    cursor: pointer;
    color: #ffffff;
    font-size: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ai-video-modal__navigation-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    width: 100%;
    display: flex;
    justify-content: space-between;
    transform: translateY(-50%);
    z-index: 1001;
  }

  .ai-video-modal__nav-button-{{ ai_gen_id }} {
    width: 50px;
    height: 50px;
    background-color: rgba(0, 0, 0, 0.5);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #ffffff;
    margin: 0 20px;
  }

  .ai-video-modal__nav-button-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .ai-video-modal__thumbnails-{{ ai_gen_id }} {
    display: flex;
    overflow-x: auto;
    margin-top: 15px;
    padding: 10px 0;
    gap: 10px;scrollbar-width: thin;
    scrollbar-color: #666 #333;
  }

  .ai-video-modal__thumbnails-{{ ai_gen_id }}::-webkit-scrollbar {
    height: 8px;
  }

  .ai-video-modal__thumbnails-{{ ai_gen_id }}::-webkit-scrollbar-track {
    background: #333;
    border-radius: 4px;
  }

  .ai-video-modal__thumbnails-{{ ai_gen_id }}::-webkit-scrollbar-thumb {
    background-color: #666;
    border-radius: 4px;
  }

  .ai-video-modal__thumb-item-{{ ai_gen_id }} {
    flex: 0 0 120px;
    height: 70px;
    position: relative;
    cursor: pointer;
    border: 2px solid transparent;
    border-radius: 4px;
    overflow: hidden;
  }

  .ai-video-modal__thumb-item-{{ ai_gen_id }}.active {
    border-color: #ffffff;
  }

  .ai-video-modal__thumb-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f4f4f4;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 50%;
    height: 50%;
    opacity: 0.5;
  }
{% endstyle %}

<video-slides-{{ ai_gen_id }} 
  class="ai-video-slides-{{ ai_gen_id }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-loop="{{ block.settings.loop }}"
  data-mute="{{ block.settings.mute }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-slides__container-{{ ai_gen_id }}">
    {% for i in (1..5) %}
      {% assign video_url_key = 'video_url_' | append: i %}
      {% assign video_title_key = 'video_title_' | append: i %}
      {% assign video_description_key = 'video_description_' | append: i %}
      {% assign video_thumbnail_key = 'video_thumbnail_' | append: i %}
      
      {% assign video_url = block.settings[video_url_key] %}
      {% assign video_title = block.settings[video_title_key] %}
      {% assign video_description = block.settings[video_description_key] %}
      {% assign video_thumbnail = block.settings[video_thumbnail_key] %}
      
      {% if video_url != blank %}
        <div 
          class="ai-video-slides__item-{{ ai_gen_id }}" 
          data-index="{{ i }}" 
          data-video-url="{{ video_url }}"
          data-video-title="{{ video_title }}"
          data-video-description="{{ video_description }}"
          data-video-type="{% if video_url contains 'youtube.com' or video_url contains 'youtu.be' %}youtube{% else %}regular{% endif %}"
        >
          <div class="ai-video-slides__thumbnail-wrapper-{{ ai_gen_id }}">
            {% if video_thumbnail %}
              <img 
                src="{{ video_thumbnail | image_url: width: 800 }}" 
                alt="{{ video_title }}" 
                loading="lazy" 
                class="ai-video-slides__thumbnail-{{ ai_gen_id }}"
              >
            {% else %}
              <div class="ai-video-placeholder-{{ ai_gen_id }}">
                {{ 'image' | placeholder_svg_tag }}
              </div>
            {% endif %}<div class="ai-video-slides__play-button-{{ ai_gen_id }}">
              <div class="ai-video-slides__play-icon-{{ ai_gen_id }}"></div>
            </div>
          </div>
          
          {% if video_title != blank %}
            <h3 class="ai-video-slides__title-{{ ai_gen_id }}">{{ video_title }}</h3>
          {% endif %}
          
          {% if video_description != blank %}
            <p class="ai-video-slides__description-{{ ai_gen_id }}">{{ video_description }}</p>
          {% endif %}
        </div>
      {% endif %}
    {% endfor %}
  </div>
  
  <div class="ai-video-modal-{{ ai_gen_id }}">
    <div class="ai-video-modal__container-{{ ai_gen_id }}">
      <div class="ai-video-modal__content-{{ ai_gen_id }}">
        <button class="ai-video-modal__close-{{ ai_gen_id }}" aria-label="Close video">✕</button>
        
        <div class="ai-video-modal__player-container-{{ ai_gen_id }}">
          <div class="ai-video-modal__player-{{ ai_gen_id }}"></div>
        </div>
        
        <div class="ai-video-modal__info-{{ ai_gen_id }}">
          <h3 class="ai-video-modal__title-{{ ai_gen_id }}"></h3>
          <p class="ai-video-modal__description-{{ ai_gen_id }}"></p>
        </div>
        
        <div class="ai-video-modal__thumbnails-{{ ai_gen_id }}"></div>
      </div>
      
      <div class="ai-video-modal__navigation-{{ ai_gen_id }}">
        <button class="ai-video-modal__nav-button-{{ ai_gen_id }} ai-video-modal__prev-{{ ai_gen_id }}" aria-label="Previous video">
          ←
        </button>
        <button class="ai-video-modal__nav-button-{{ ai_gen_id }} ai-video-modal__next-{{ ai_gen_id }}" aria-label="Next video">
          →
        </button>
      </div>
    </div>
  </div>
</video-slides-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoSlides extends HTMLElement {
      constructor() {
        super();
        this.modal = this.querySelector('.ai-video-modal-{{ ai_gen_id }}');
        this.modalPlayer = this.querySelector('.ai-video-modal__player-{{ ai_gen_id }}');
        this.modalTitle = this.querySelector('.ai-video-modal__title-{{ ai_gen_id }}');
        this.modalDescription = this.querySelector('.ai-video-modal__description-{{ ai_gen_id }}');
        this.modalThumbnails = this.querySelector('.ai-video-modal__thumbnails-{{ ai_gen_id }}');
        this.closeButton = this.querySelector('.ai-video-modal__close-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-video-modal__prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-video-modal__next-{{ ai_gen_id }}');
        this.videoItems = this.querySelectorAll('.ai-video-slides__item-{{ ai_gen_id }}');
        
        this.currentIndex = 0;
        this.player = null;
        this.autoplay = this.dataset.autoplay === 'true';
        this.loop = this.dataset.loop === 'true';
        this.mute = this.dataset.mute === 'true';
        
        this.setupEventListeners();
        this.createThumbnails();}
      
      connectedCallback() {
        // Load YouTube API if needed
        if (this.hasYouTubeVideos()) {
          this.loadYouTubeAPI();
        }
      }
      
      hasYouTubeVideos() {
        return Array.from(this.videoItems).some(item => 
          item.dataset.videoType === 'youtube'
        );
      }
      
      loadYouTubeAPI() {
        if (window.YT) return;
        
        const tag = document.createElement('script');
        tag.src = 'https://www.youtube.com/iframe_api';
        const firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      }
      
      setupEventListeners() {
        this.videoItems.forEach((item, index) => {
          item.addEventListener('click', () => {
            this.openModal(index);
          });
        });
        
        this.closeButton.addEventListener('click', () => {
          this.closeModal();
        });
        
        this.prevButton.addEventListener('click', () => {
          this.navigateVideo(-1);
        });
        
        this.nextButton.addEventListener('click', () => {
          this.navigateVideo(1);
        });
        document.addEventListener('keydown', (event) => {
          if (this.modal.style.display === 'block') {
            if (event.key === 'Escape') {
              this.closeModal();
            } else if (event.key === 'ArrowLeft') {
              this.navigateVideo(-1);
            } else if (event.key === 'ArrowRight') {
              this.navigateVideo(1);
            }
          }
        });
      }
      
      createThumbnails() {
        this.videoItems.forEach((item, index) => {
          const thumbnail = document.createElement('div');
          thumbnail.className = `ai-video-modal__thumb-item-{{ ai_gen_id }}`;
          thumbnail.dataset.index = index;
          
          const thumbnailImg = item.querySelector('.ai-video-slides__thumbnail-{{ ai_gen_id }}');
          if (thumbnailImg) {
            const img = document.createElement('img');
            img.src = thumbnailImg.src;
            img.alt = item.dataset.videoTitle || '';
            img.className = 'ai-video-modal__thumb-image-{{ ai_gen_id }}';
            thumbnail.appendChild(img);
          } else {
            const placeholder = document.createElement('div');
            placeholder.className = 'ai-video-placeholder-{{ ai_gen_id }}';
            placeholder.innerHTML = `<svg viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect width="100" height="100" fill="#E5E5E5"/>
              <path d="M65 50L42.5 62.9904V37.0096L65 50Z" fill="#999999"/>
            </svg>`;
            thumbnail.appendChild(placeholder);
          }
          
          thumbnail.addEventListener('click', () => {
            this.openVideo(index);
          });
          
          this.modalThumbnails.appendChild(thumbnail);
        });
      }
      
      openModal(index) {
        this.modal.style.display = 'block';document.body.style.overflow = 'hidden';
        this.openVideo(index);
      }
      
      closeModal() {
        this.modal.style.display = 'none';
        document.body.style.overflow = '';
        this.stopVideo();
      }
      
      openVideo(index) {
        this.currentIndex = index;
        const videoItem = this.videoItems[index];
        const videoUrl = videoItem.dataset.videoUrl;
        const videoType = videoItem.dataset.videoType;
        
        // Update title and description
        this.modalTitle.textContent = videoItem.dataset.videoTitle || '';
        this.modalDescription.textContent = videoItem.dataset.videoDescription || '';
        
        // Update active thumbnail
        const thumbnails = this.modalThumbnails.querySelectorAll('.ai-video-modal__thumb-item-{{ ai_gen_id }}');
        thumbnails.forEach(thumb => {
          thumb.classList.remove('active');
          if (parseInt(thumb.dataset.index) === index) {
            thumb.classList.add('active');
            
            // Scroll to the active thumbnail
            const scrollLeft = thumb.offsetLeft - this.modalThumbnails.offsetWidth / 2 + thumb.offsetWidth / 2;
            this.modalThumbnails.scrollTo({
              left: scrollLeft,
              behavior: 'smooth'
            });
          }
        });
        
        // Clear previous player
        this.stopVideo();
        this.modalPlayer.innerHTML = '';
        
        // Create new player
        if (videoType === 'youtube') {
          this.createYouTubePlayer(videoUrl);
        } else {
          this.createVideoPlayer(videoUrl);
        }
      }
      
      createYouTubePlayer(url) {
        // Extract YouTube video ID
        const videoId = this.getYouTubeVideoId(url);
        if (!videoId) return;
        
        // Create player when API is ready
        if (window.YT && window.YT.Player) {
          this.createYTPlayer(videoId);
        } else {
          window.onYouTubeIframeAPIReady = () => {
            this.createYTPlayer(videoId);
          };
        }
      }
      
      createYTPlayer(videoId) {
        const playerDiv = document.createElement('div');
        playerDiv.id = `youtube-player-{{ ai_gen_id }}-${this.currentIndex}`;
        this.modalPlayer.appendChild(playerDiv);
        
        this.player = new YT.Player(playerDiv.id, {
          videoId: videoId,
          playerVars: {
            autoplay: this.autoplay ? 1 : 0,
            loop: this.loop ? 1 : 0,
            mute: this.mute ? 1 : 0,
            controls: 1,
            rel: 0,
            modestbranding: 1
          },
          events: {
            onReady: (event) => {
              if (this.autoplay) {
                event.target.playVideo();
              }
            }
          }
        });
      }
      
      createVideoPlayer(url) {
        const video = document.createElement('video');
        video.src = url;
        video.controls = true;
        video.autoplay = this.autoplay;
        video.loop = this.loop;
        video.muted = this.mute;
        video.className = 'ai-video-modal__video-{{ ai_gen_id }}';
        video.style.width = '100%';
        video.style.height = '100%';
        
        this.modalPlayer.appendChild(video);
        this.player = video;
      }
      
      stopVideo() {
        if (!this.player) return;
        
        if (this.player.tagName === 'VIDEO') {
          this.player.pause();
        } else if (typeof this.player.pauseVideo === 'function') {
          this.player.pauseVideo();
        }
      }
      
      navigateVideo(direction) {
        let newIndex = this.currentIndex + direction;
        
        // Loop around if needed
        if (newIndex < 0) {
          newIndex = this.videoItems.length - 1;
        } else if (newIndex >= this.videoItems.length) {
          newIndex = 0;
        }
        
        this.openVideo(newIndex);
      }
      
      getYouTubeVideoId(url) {
        const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
        const match = url.match(regExp);
        return (match && match[2].length === 11) ? match[2] : null;
      }
    }
    
    customElements.define('video-slides-{{ ai_gen_id }}', VideoSlides);
  })();
</script>

{% schema %}
{
  "name": "Video Slides",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 4,
      "step": 1,
      "default": 3,
      "label": "Columns on desktop"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "1"
    },
    {
      "type": "range",
      "id": "gap",
      "min": 0,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Gap between videos",
      "default": 16
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#121212"
    },
    {
      "type": "header",
      "content": "Video Settings"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay videos",
      "default": true,
      "info": "Autoplay may not work on mobile devices due to browser restrictions"
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Loop videos",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "mute",
      "label": "Mute videos",
      "default": true
    },
    {
      "type": "header",
      "content": "Video 1"
    },
    {
      "type": "url",
      "id": "video_url_1",
      "label": "Video URL",
      "info": "YouTube or direct video file URL"
    },
    {
      "type": "text",
      "id": "video_title_1",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "video_description_1",
      "label": "Description"
    },
    {
      "type": "image_picker",
      "id": "video_thumbnail_1",
      "label": "Custom thumbnail"
    },
    {
      "type": "header",
      "content": "Video 2"
    },
    {
      "type": "url",
      "id": "video_url_2",
      "label": "Video URL",
      "info": "YouTube or direct video file URL"
    },
    {
      "type": "text",
      "id": "video_title_2",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "video_description_2",
      "label": "Description"
    },
    {
      "type": "image_picker",
      "id": "video_thumbnail_2",
      "label": "Custom thumbnail"
    },
    {
      "type": "header",
      "content": "Video 3"
    },
    {
      "type": "url",
      "id": "video_url_3",
      "label": "Video URL",
      "info": "YouTube or direct video file URL"
    },
    {
      "type": "text",
      "id": "video_title_3",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "video_description_3",
      "label": "Description"
    },
    {
      "type": "image_picker",
      "id": "video_thumbnail_3",
      "label": "Custom thumbnail"
    },
    {
      "type": "header",
      "content": "Video 4"
    },
    {
      "type": "url",
      "id": "video_url_4",
      "label": "Video URL",
      "info": "YouTube or direct video file URL"
    },
    {
      "type": "text",
      "id": "video_title_4",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "video_description_4",
      "label": "Description"
    },
    {
      "type": "image_picker",
      "id": "video_thumbnail_4",
      "label": "Custom thumbnail"
    },
    {
      "type": "header",
      "content": "Video 5"
    },
    {
      "type": "url",
      "id": "video_url_5",
      "label": "Video URL",
      "info": "YouTube or direct video file URL"
    },
    {
      "type": "text",
      "id": "video_title_5",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "video_description_5",
      "label": "Description"
    },
    {
      "type": "image_picker",
      "id": "video_thumbnail_5",
      "label": "Custom thumbnail"
    }
  ],
  "presets": [
    {
      "name": "Video Slides"
    }
  ]
}
{% endschema %}